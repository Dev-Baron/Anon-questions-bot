# Default imports
import structlog

# File imports
from bot import keyboards
from bot.database.database import db
from bot.states import AnonymousMessage

# Aiogram imports
from aiogram import Router, Bot, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandObject
from aiogram.utils.keyboard import InlineKeyboardBuilder


router = Router()
logger = structlog.get_logger()


@router.message(Command('start', 'restart'))
async def cmd_start(
    message: types.Message,
    command: CommandObject,
    state: FSMContext,
    bot: Bot) -> None:

    try:
        
        bot_info = await bot.get_me()
        user = message.from_user
        res = await db.get_user(user.id)
        
        
        if not res:
            await db.add_user(user.id, user.full_name, user.username)
            
            
        if command.args:
            target = command.args
            
            
            if not target.isdigit():
                await message.reply(
                    text='<b>‚ùå –°—Å—ã–ª–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞, ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º...</b>',
                    parse_mode='HTML'
                )
                return
            
            
            target_user = await db.get_user(target)
            
            
            if not target_user:
                await message.reply(
                    text='<b>‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ.</b>',
                    parse_mode='HTML'
                )
                return
            
            
            await state.update_data(target_user_id = target)
            await state.set_state(AnonymousMessage.waiting_for_message)
            
            await message.answer(
                text='üöÄ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å <b>–∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —ç—Ç—É —Å—Å—ã–ª–∫—É\n\n'
                    'üñä <b>–ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –≤—Å—ë, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –µ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å,</b> –∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ–Ω –ø–æ–ª—É—á–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ—Ç –∫–æ–≥–æ\n\n'
                    '<b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ –ø–æ–∫–∞ —á—Ç–æ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç...</b>',
                parse_mode='HTML'
            )
            return
        
        
        markup = await keyboards.get_share_keyboard(message, bot)
        await message.answer(
            text=f'<b>–ù–∞—á–Ω–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>\n\nüëâ t.me/{bot_info.username}?start={user.id}\n\n<b>–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É</b> ‚òùÔ∏è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è Telegram, TikTok, Instagram (stories), <b>—á—Ç–æ–±—ã –≤–∞–º –º–æ–≥–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å</b> üí¨',
            parse_mode='HTML',
            reply_markup=markup
        )
        
        
    except Exception as e:
        logger.info(f'ERROR: {e}')


@router.message(AnonymousMessage.waiting_for_message, F.text)
async def handle_anonymous_message(
    message: types.Message,
    state: FSMContext,
    bot: Bot
    ) -> None:
    
    
    builder = InlineKeyboardBuilder()
    builder.button(
    text='üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ',
    callback_data=f'reply_{message.from_user.id}'
        )
    reply_kb = builder.as_markup()
    
    
    data = await state.get_data()
    target_user_id = data.get('target_user_id')
    
    
    if not target_user_id:
        await message.answer(
            text='<b>‚ùå –û—à–∏–±–∫–∞, –Ω–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å.</b>',
            parse_mode='HTML'
        )
        await state.clear()
        return
    
    
    try:
        
        await bot.send_message(
            chat_id=target_user_id,
            text=f'üì∞ <b>–í–∞–º –ø—Ä–∏—à–ª–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n\n{message.text}',
            parse_mode='HTML',
            reply_markup=reply_kb
        )
        
        await message.answer('‚úÖ <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>', 'HTML')
        logger.info(f'USER: {message.from_user.id} SEND: {message.text} TO: {target_user_id}')


    except Exception as e:
        await message.answer(
            text = '<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...</b>',
            parse_mode='HTML'   
        )
        return logger.info(f'ERROR: {e}')
    
    await state.clear()


@router.callback_query(F.data.startswith('reply_'))
async def handle_reply_callback(callback: types.CallbackQuery, state: FSMContext) -> None:
    sender_id = callback.data.split('_')[1]
    
    if not sender_id:
        await callback.answer('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è...')
        return
    
    await state.update_data(target_user_id=sender_id)
    await state.set_state(AnonymousMessage.waiting_for_reply)
    
    await callback.message.answer(
        text='üöÄ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å <b>–∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —ç—Ç—É —Å—Å—ã–ª–∫—É\n\n'
            'üñä <b>–ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –≤—Å—ë, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –µ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å,</b> –∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ–Ω –ø–æ–ª—É—á–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ—Ç –∫–æ–≥–æ\n\n'
            '<b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ –ø–æ–∫–∞ —á—Ç–æ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç...</b>',
        parse_mode='HTML'
    )
    await callback.answer()


@router.message(AnonymousMessage.waiting_for_reply, F.text)
async def handle_reply_message(
    message: types.Message,
    state: FSMContext,
    bot: Bot
) -> None:
    
    data = await state.get_data()
    target_user_id = data.get('target_user_id')
    
    if not target_user_id:
        await message.answer('<b>‚ùå –û—à–∏–±–∫–∞! –ù–µ —É–∫–∞–∑–∞–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å.</b>')
        return
    
    try:
        await bot.send_message(
            chat_id=int(target_user_id),
            text=f'<b>üì∞ –í–∞–º –æ—Ç–≤–µ—Ç–∏–ª–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ:</b>\n\n{message.text}',
            parse_mode='HTML'
        )
        
        await message.answer(
            text = '‚úÖ <b>–í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...</b>', 
            parse_mode='HTML'
        )
        logger.info(f'USER: {message.from_user.id} REPLY TO: {target_user_id} TEXT: {message.text}')
        
        
    except Exception as e:
        await message.answer(
            text = '‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...</b>',
            parse_mode='HTML'
        )
        return logger.info(f'ERROR: {e}')
    
    await state.clear()